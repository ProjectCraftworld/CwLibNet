using CwLibNet.Types.Archives;
using CwLibNet.Types.Data;
using CwLibNet.Types.Databases;

namespace CwLibNetTests;

public class FarcMap
{
    private static readonly byte[] farc =
    [
        0x54, 0x75, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x3f, 0x0a,
        0x56, 0xf1, 0x21, 0xf8, 0x7e, 0x48, 0x33, 0x2a, 0x20, 0x35, 0x45, 0xb3, 0x4b, 0x0f, 0xb3, 0x71,
        0x58, 0xe5, 0x95, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
        0x46, 0x41, 0x52, 0x43
    ];

    private static readonly byte[] map = [
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x63, 0x69, 0x61, 0x6f, 
        0x2f, 0x63, 0x6f, 0x6d, 0x65, 0x76, 0x61, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x67, 
        0xe6, 0x78, 0xb5, 0x00, 0x00, 0x00, 0x10, 0x56, 0xf1, 0x21, 0xf8, 0x7e, 0x48, 0x33, 0x2a, 0x20, 
        0x35, 0x45, 0xb3, 0x4b, 0x0f, 0xb3, 0x71, 0x58, 0xe5, 0x95, 0x60, 0x00, 0x16, 0x00, 0x01
    ];
    
    [Fact]
    public void ExtractFromFarc()
    {
        byte[] testBytes =
        [
            0x54, 0x75, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x3f, 0x0a
        ];
        File.WriteAllBytes(".dump.farc", farc);
        FileArchive fileArchive = new FileArchive(".dump.farc");
        byte[] output = fileArchive.Extract(new Sha1("56f121f87e48332a203545b34b0fb37158e59560"));
        File.Delete(".dump.farc");
        Assert.Equal(testBytes, output);
    }

    [Fact]
    public void WriteFarc()
    {
        File.WriteAllBytes(".dump.farc", farc);
        FileArchive fileArchive = new FileArchive(".dump.farc");
        fileArchive.Save();
        FileArchive fileArchive2 = new FileArchive(".dump.farc");
        byte[] output = fileArchive2.Extract(new Sha1("56f121f87e48332a203545b34b0fb37158e59560"));
        byte[] testBytes =
        [
            0x54, 0x75, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x74, 0x65, 0x3f, 0x0a
        ];
        File.Delete(".dump.farc");
        Assert.Equal(testBytes, output);
    }

    [Fact]
    public void ReadMap()
    {
        File.WriteAllBytes(".dump.map", map);
        FileDb db = new FileDb(".dump.map");
        FileDbRow entry = db.Get(1441793);
        File.Delete(".dump.map");
        Assert.Equal(new Sha1("56f121f87e48332a203545b34b0fb37158e59560"), entry.Sha1);
    }

    [Fact]
    public void WriteMap()
    {
        File.WriteAllBytes(".dump.map", map);
        FileDb db = new FileDb(".dump.map");
        db.Save();
        FileDb db2 = new FileDb(".dump.map");
        FileDbRow entry = db2.Get(1441793);
        File.Delete(".dump.map");
        Assert.Equal(new Sha1("56f121f87e48332a203545b34b0fb37158e59560"), entry.Sha1);
    }
}