using CwLibNet.Enums;
using CwLibNet.IO.Serializer;
using CwLibNet.Resources;
using CwLibNet.Types.Data;

namespace CwLibNetTests;

public class RPlanTest
{
    private static readonly byte[]? EavLogoPlan =
    [
        0xf2, 0x04, 0xd8, 0x02, 0x01, 0x01, 0xaa, 0x00, 0x95, 0x2a, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x93, 0xfb, 0x01, 0x4e, 0x91, 0x84, 0x92, 0x80, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x70, 0x33, 0x3f, 0x80, 0x00, 0x00, 0xb4, 0xdd, 0x3f, 0x6d, 0x34, 0xdd, 0x3f, 0x6d, 0x3f, 0x80, 
  0x00, 0x00, 0xc6, 0x99, 0xde, 0x65, 0x45, 0x85, 0x90, 0x79, 0xc4, 0x54, 0xfb, 0xb9, 0x70, 0x33, 
  0x3f, 0x80, 0x00, 0x00, 0xb4, 0xdd, 0x3f, 0x6d, 0x34, 0xdd, 0x3f, 0x6d, 0x3f, 0x80, 0x00, 0x00, 
  0xc6, 0x99, 0xde, 0x65, 0x45, 0x85, 0x90, 0x79, 0xc4, 0x54, 0xfb, 0xb9, 0x04, 0x00, 0x02, 0x9e, 
  0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x02, 0xfc, 0x80, 0x60, 0x3f, 0x05, 0x46, 0xea, 0x3f, 
  0x39, 0xd6, 0x25, 0x3e, 0x83, 0x12, 0x65, 0xb4, 0x0a, 0xd8, 0xf4, 0xb4, 0x24, 0xe1, 0xa1, 0x3e, 
  0x03, 0x12, 0x6b, 0xad, 0x55, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0e, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x04, 0x43, 0xc0, 0x00, 0x00, 0x43, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x14, 0x43, 0x7f, 0xff, 0xf9, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x02, 0x89, 0x1b, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x3f, 
  0x80, 0x00, 0x00, 0x3e, 0x99, 0x99, 0x9a, 0x3e, 0x99, 0x99, 0x9a, 0x3e, 0x99, 0x99, 0x9a, 0x3f, 
  0x80, 0x00, 0x00, 0x41, 0x20, 0x00, 0x00, 0x30, 0x12, 0x34, 0xdd, 0x3f, 0x6d, 0xb4, 0xdd, 0x3f, 
  0x6d, 0x43, 0x80, 0x01, 0x40, 0x43, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x41, 0x56, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x4c, 0x00, 0x6f, 0x00, 0x67, 0x00, 0x6f, 0x00, 0x20, 
  0x00, 0x45, 0x00, 0x41, 0x00, 0x56, 0x18, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x20, 0x00, 
  0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x20, 0x00, 0x45, 0x00, 0x41, 0x00, 0x56, 0x00, 
  0x02, 0xfc, 0x80, 0x60, 0x00, 0x00, 0xe9, 0xeb, 0xe8, 0x91, 0x04, 0xfb, 0xfd, 0xcf, 0xa3, 0x05
    ]; // this is a plan from my personal mod about trains, made so in order not to violate any copyright with game files

    
    // Due to the high amount of data in an RPlan, I'll only check that some fields are correct, and I'll not make a static test RPlan
    [Fact]
    public void DataCheck()
    {
        Serializer serializer = new Serializer(EavLogoPlan, new Revision(Branch.Leerdammer.Head, Branch.Leerdammer.Id, 23), 7);
        RPlan plan = new RPlan();
        plan.Serialize(serializer);
        Assert.Equal("Logo EAV", plan.InventoryData.UserCreatedDetails?.Name);
    }

    [Fact]
    public void CanGetThings()
    {
        Serializer serializer = new Serializer(EavLogoPlan, new Revision(Branch.Leerdammer.Head, Branch.Leerdammer.Id, 23), 7);
        RPlan plan = new RPlan();
        plan.Serialize(serializer);
        Assert.NotNull(plan.GetThings());
    }

    [Fact]
    public void Reserialize()
    {
        Serializer serializer = new Serializer(EavLogoPlan, new Revision(Branch.Leerdammer.Head, Branch.Leerdammer.Id, 23), 7);
        RPlan plan = new RPlan();
        plan.Serialize(serializer);
        SerializationData data = plan.Build(new Revision(Branch.Leerdammer.Head, Branch.Leerdammer.Id, 23), 7);
        Assert.Equal(data.Buffer, EavLogoPlan);
    }
}